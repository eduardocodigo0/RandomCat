// Generated by view binder compiler. Do not edit!
package me.eduardo.androidApp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ProgressBar;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import me.eduardo.androidApp.R;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button btGetCat;

  @NonNull
  public final Button btShare;

  @NonNull
  public final ImageView ivCat;

  @NonNull
  public final ConstraintLayout mainView;

  @NonNull
  public final ProgressBar pbLoading;

  private ActivityMainBinding(@NonNull ConstraintLayout rootView, @NonNull Button btGetCat,
      @NonNull Button btShare, @NonNull ImageView ivCat, @NonNull ConstraintLayout mainView,
      @NonNull ProgressBar pbLoading) {
    this.rootView = rootView;
    this.btGetCat = btGetCat;
    this.btShare = btShare;
    this.ivCat = ivCat;
    this.mainView = mainView;
    this.pbLoading = pbLoading;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.bt_get_cat;
      Button btGetCat = rootView.findViewById(id);
      if (btGetCat == null) {
        break missingId;
      }

      id = R.id.bt_share;
      Button btShare = rootView.findViewById(id);
      if (btShare == null) {
        break missingId;
      }

      id = R.id.iv_cat;
      ImageView ivCat = rootView.findViewById(id);
      if (ivCat == null) {
        break missingId;
      }

      ConstraintLayout mainView = (ConstraintLayout) rootView;

      id = R.id.pb_loading;
      ProgressBar pbLoading = rootView.findViewById(id);
      if (pbLoading == null) {
        break missingId;
      }

      return new ActivityMainBinding((ConstraintLayout) rootView, btGetCat, btShare, ivCat,
          mainView, pbLoading);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
